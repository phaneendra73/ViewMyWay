// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  email          String   @unique
  name           String?
  password       String
  posts          Post[]
  profileImageUrl String? // URL to the user's profile image
  role           Int  @default(0) // User roles like admin, editor, etc.
  status         Boolean  @default(true) // Account status like active, inactive, etc.
}

model Post {
  id        String      @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("PostTags")
}

model Tag {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  posts Post[]   @relation("PostTags")
}

// const postWithTags = await prisma.post.findUnique({
//   where: { id: postId },
//   include: { tags: true }
// });

// const tagWithPosts = await prisma.tag.findUnique({
//   where: { id: tagId },
//   include: { posts: true }
// });
